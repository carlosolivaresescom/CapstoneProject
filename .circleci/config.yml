version: 2.1
orbs:
  slack: circleci/slack@4.5.3

commands:
  destroy-cluster:
    description: Destroy cluster.
    steps:
      - run:
          name: Destroy cluster
          when: on_fail
          command: |
            echo "Destroying cluster ${CIRCLE_WORKFLOW_ID:0:7}"
            eksctl delete cluster --name capstone-${CIRCLE_WORKFLOW_ID:0:7}
  revert-docker-image:
    description: Revert docker image.
    steps:
      - run:
          name: Destroy cluster
          when: on_fail
          command: |
            echo "Reverting docker image"
            docker login -u ${DOCKER_USER} -p ${DOCKER_PASSWORD}
            docker pull ${DOCKER_USER}/capstoneproject:old
            docker tag ${DOCKER_USER}/capstoneproject:old ${DOCKER_USER}/capstoneproject:latest
            docker push ${DOCKER_USER}/capstoneproject

jobs:
  eslint:
    docker:
      - image: circleci/node:14
    steps:
      - checkout
      - run:
          name: lint
          command: |
            cd backend2
            npm install
            npx eslint
            npx eslint app.js

  build:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [build]
      - run:
          name: Build
          command: |
            cd backend2
            npm install
            npm run build

  upload_docker_image:
    machine: true
    steps:
      - checkout
      - run:
          name: build images
          command: |
            cd backend2
            docker build -t capstoneproject .
            docker images
      - run:
          name: push to docker hub while keeping old image
          command: |
            docker login -u ${DOCKER_USER} -p ${DOCKER_PASSWORD}
            docker pull ${DOCKER_USER}/capstoneproject:latest
            docker tag ${DOCKER_USER}/capstoneproject:latest ${DOCKER_USER}/capstoneproject:old
            docker push ${DOCKER_USER}/capstoneproject:old
            docker tag capstoneproject ${DOCKER_USER}/capstoneproject:latest
            docker push ${DOCKER_USER}/capstoneproject

  create-cluster:
    docker:
      - image: alpine/k8s:1.15.12
    steps:
      - checkout
      - run:
          name: Create cluster
          command: |
            export clustername="capstone-${CIRCLE_WORKFLOW_ID:0:7}"
            echo ${clustername}
            sed -e "s/clustername/$clustername/g" .circleci/files/create.yml | eksctl create cluster -f -
            #eksctl create cluster -f .circleci/files/create.yml
      - run:
          name: Get pods
          command: |
            kubectl get pods
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Run kubectl
          command: |
            kubectl create -f .circleci/files/deployment.yml
            kubectl create -f .circleci/files/ecrserver.yml
            sleep 1m
            #Manually open port 30072
            kubectl get all
      - destroy-cluster

  restart-cluster:
    docker:
      - image: alpine/k8s:1.15.12
    steps:
      - checkout
      - run:
          name: Restart deployment
          command: |
            kubectl config view
            kubectl get all
            kubectl rollout restart deployment.apps/kubeapp-ecr-deploy
            sleep 1m
            kubectl get all

  smoke-test:
    machine: true
    steps:
      - checkout
      - run:
          name: Smoke test.
          command: |
            #for new cluster change url
            URL="http://ec2-44-192-83-90.compute-1.amazonaws.com:30072"            
            echo ${URL} 
            if curl -s ${URL} | grep "Success"
            then
              echo "url working"
            else
              echo "url not working"
              exit 1
            fi
      - revert-docker-image

workflows:
  default:
    jobs:
      #- deploy-ecr-infrastructure:
      #    filters:
      #      branches:
      #        only: main
      #- upload-docker:
      #    filters:
      #      branches:
      #        only: main
      #    requires: [deploy-ecr-infrastructure]
      #- deploy-infrastructure:
      #    filters:
      #      branches:
      #        only: main
      #requires: [upload-docker]
      #- configure-infrastructure:
      #    filters:
      #      branches:
      #        only: main
      #    requires: [deploy-infrastructure]
      - eslint:
          filters:
            branches:
              only:
                - main
                - createcluster
      - build:
          filters:
            branches:
              only:
                - main
                - createcluster
          requires: [eslint]
      - upload_docker_image:
          filters:
            branches:
              only:
                - main
                - createcluster
          requires: [build]
      - create-cluster:
          filters:
            branches:
              only: createcluster
          requires: [upload_docker_image]
      - restart-cluster:
          filters:
            branches:
              only:
                - main
          requires: [upload_docker_image]
      #- smoke-test:
      #    filters:
      #      branches:
      #        only: main
      #    requires: [upload_docker_image]
